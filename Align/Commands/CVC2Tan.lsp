;
;
;     Program written by Robert Livingston, 2022-01-28
;
;     VC2TAN draws a line tangent to two vertical curves
;
(defun C:VC2TAN (/ A1 A2 B1 B2 C1 C2 ENT ENTLIST G1 G2 P1 P2 P3 PG1 PG2 XA XB X1 X2 Y1 Y2)
 (setq ENT (car (entsel "\nSelect 'from' vertical curve :")))
 (if (/= nil ENT)
  (progn
   (setq ENTLIST (entget ENT))
   (if (= "POLYLINE" (cdr (assoc 0 ENTLIST)))
    (progn
     (setq ENT (entnext ENT))
     (setq ENTLIST (entget ENT))
     (setq P1 (cdr (assoc 10 ENTLIST)))
     (setq ENT (entnext ENT))
     (setq ENTLIST (entget ENT))
     (setq P2 (cdr (assoc 10 ENTLIST)))
     (setq PG1 P2)
     (if (/= nil P2)
      (progn
       (setq ENT (entnext ENT))
       (setq ENTLIST (entget ENT))
       (setq P3 (cdr (assoc 10 ENTLIST)))
       (if (/= nil P3)
        (progn
         (setq ENT (entnext ENT))
         (setq ENTLIST (entget ENT))
         (while (/= "SEQEND" (cdr (assoc 0 ENTLIST)))
          (setq P2 P3)
          (setq P3 (cdr (assoc 10 ENTLIST)))
          (setq ENT (entnext ENT))
          (setq ENTLIST (entget ENT))
         )
        )
       )
      )
     )
     (if (and (/= nil P1) (/= nil P2) (/= nil P3))
      (progn
       (setq X1 (nth 0 P1))
       (setq Y1 (nth 1 P1))
       (setq X2 (nth 0 P2))
       (setq Y2 (nth 1 P2))
       (setq X3 (nth 0 P3))
       (setq Y3 (nth 1 P3))
       (setq XA (min X1 X3))
       (setq XB (max X1 X3))
       (setq G1 (/ (- Y2 Y1) (- X2 X1)))
       (setq G2 (/ (- Y3 Y2) (- X3 X2)))
       (setq A1 (/ (- G2 G1) (- X3 X1) 2.0))
       (setq B1 (/ (- G2 (* G1 (/ X3 X1))) (- 1.0 (/ X3 X1))))
       (setq C1 (- Y1 (+ (* A1 X1 X1) (* B1 X1))))
       (setq ENT (car (entsel "\nSelect 'to' vertical curve :")))
       (if (/= nil ENT)
        (progn
         (setq ENTLIST (entget ENT))
         (if (= "POLYLINE" (cdr (assoc 0 ENTLIST)))
          (progn
           (setq ENT (entnext ENT))
           (setq ENTLIST (entget ENT))
           (setq P1 (cdr (assoc 10 ENTLIST)))
           (setq ENT (entnext ENT))
           (setq ENTLIST (entget ENT))
           (setq P2 (cdr (assoc 10 ENTLIST)))
           (setq PG2 P2)
           (if (/= nil P2)
            (progn
             (setq ENT (entnext ENT))
             (setq ENTLIST (entget ENT))
             (setq P3 (cdr (assoc 10 ENTLIST)))
             (if (/= nil P3)
              (progn
               (setq ENT (entnext ENT))
               (setq ENTLIST (entget ENT))
               (while (/= "SEQEND" (cdr (assoc 0 ENTLIST)))
                (setq P2 P3)
                (setq P3 (cdr (assoc 10 ENTLIST)))
                (setq ENT (entnext ENT))
                (setq ENTLIST (entget ENT))
               )
              )
             )
            )
           )
           (if (and (/= nil P1) (/= nil P2) (/= nil P3))
            (progn
             (setq X1 (nth 0 P1))
             (setq Y1 (nth 1 P1))
             (setq X2 (nth 0 P2))
             (setq Y2 (nth 1 P2))
             (setq X3 (nth 0 P3))
             (setq Y3 (nth 1 P3))
             (setq G1 (/ (- Y2 Y1) (- X2 X1)))
             (setq G2 (/ (- Y3 Y2) (- X3 X2)))
             (setq A2 (/ (- G2 G1) (- X3 X1) 2.0))
             (setq B2 (/ (- G2 (* G1 (/ X3 X1))) (- 1.0 (/ X3 X1))))
             (setq C2 (- Y1 (+ (* A2 X1 X1) (* B2 X1))))
             (setq G1 (/ (- (cadr PG2) (cadr PG1)) (- (car PG2) (car PG1))))
             (setq G2 (+ G1 1.0))
             (setq C 0)
             (while (and (> (abs (- G2 G1)) RFL:TOL) (< C 1000))
              (setq G1 G2)
              (setq X1 (/ (- G1 B1) (* 2.0 A1)))
              (setq Y1 (+ (* A1 X1 X1) (* B1 X1) C1))
              (setq X2 (/ (- G1 B2) (* 2.0 A2)))
              (setq Y2 (+ (* A2 X2 X2) (* B2 X2) C2))
              (setq G2 (/ (- Y2 Y1) (- X2 X1)))
;              (print (strcat (itoa C) ": G2 = " (rtos G2 2 6) ", Diff = " (rtos (abs (- G2 G1)) 2 6)))
              (setq C (1+ C))
             )
             (if (< C 1000)
              (entmake (list (cons 0 "LINE")
                             (list 10 X1 Y1 0.0)
                             (list 11 X2 Y2 0.0)
                       )
              )
              (princ "\nMaximum iterations, no solution found!")
             )
            )
           )
          )
         )
        )
       )
      )
     )
    )
   )
  )
 )
 nil
)